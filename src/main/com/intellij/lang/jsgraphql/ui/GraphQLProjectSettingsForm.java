/*
 * Copyright (c) 2018-present, Jim Kynde Meyer
 * All rights reserved.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
package com.intellij.lang.jsgraphql.ui;

import com.intellij.lang.jsgraphql.GraphQLSettings;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.ui.IdeBorderFactory;
import com.intellij.ui.components.fields.ExpandableTextField;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.util.Objects;
import java.util.function.Predicate;

public class GraphQLProjectSettingsForm {

    private JPanel rootPanel;

    // introspection
    private JPanel introspectionPanel;
    private ExpandableTextField introspectionQueryTextField;
    private JCheckBox enableIntrospectionDefaultValues;
    JPanel relayModernPanel;
    JCheckBox enableRelayModernCheckBox;
    private JPanel additionalSettingsPanel;
    private JCheckBox treatEmptyErrorsAsSuccessfulCheckBox;

    private GraphQLSettings mySettings;

    GraphQLProjectSettingsForm initialize(GraphQLSettings mySettings) {

        this.mySettings = mySettings;
        introspectionPanel.setBorder(IdeBorderFactory.createTitledBorder("GraphQL Introspection"));
        relayModernPanel.setBorder(IdeBorderFactory.createTitledBorder("GraphQL Frameworks"));
        additionalSettingsPanel.setBorder(IdeBorderFactory.createTitledBorder("Additional GraphQL Settings"));

        return this;
    }

    JPanel getComponent() {
        return rootPanel;
    }

    void visit(Container container, Predicate<Component> componentPredicate) {
        for (int i = 0; i < container.getComponentCount(); i++) {
            Component child = container.getComponent(i);
            if (componentPredicate.test(child)) {
                return;
            }
            if (child instanceof Container) {
                visit((Container) child, componentPredicate);
            }
        }
    }

    void apply() throws ConfigurationException {
        mySettings.setIntrospectionQuery(introspectionQueryTextField.getText());
        mySettings.setEnableRelayModernFrameworkSupport(enableRelayModernCheckBox.isSelected());
        mySettings.setEnableIntrospectionDefaultValues(enableIntrospectionDefaultValues.isSelected());
        mySettings.setTreatEmptyErrorsAsSuccessful(treatEmptyErrorsAsSuccessfulCheckBox.isSelected());
    }

    void reset() {
        introspectionQueryTextField.setText(mySettings.getIntrospectionQuery());
        enableIntrospectionDefaultValues.setSelected(mySettings.isEnableIntrospectionDefaultValues());
        enableRelayModernCheckBox.setSelected(mySettings.isEnableRelayModernFrameworkSupport());
        treatEmptyErrorsAsSuccessfulCheckBox.setSelected(mySettings.isTreatingEmptyErrorsAsSuccessful());
    }

    boolean isModified() {
        if (!Objects.equals(mySettings.getIntrospectionQuery(), introspectionQueryTextField.getText())) {
            return true;
        }
        if (mySettings.isEnableRelayModernFrameworkSupport() != enableRelayModernCheckBox.isSelected()) {
            return true;
        }
        if (mySettings.isEnableIntrospectionDefaultValues() != enableIntrospectionDefaultValues.isSelected()) {
            return true;
        }
        if (mySettings.isTreatingEmptyErrorsAsSuccessful() != treatEmptyErrorsAsSuccessfulCheckBox.isSelected()) {
            return true;
        }
        return false;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        introspectionPanel = new JPanel();
        introspectionPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(introspectionPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        introspectionQueryTextField = new ExpandableTextField();
        introspectionQueryTextField.setEnabled(true);
        introspectionQueryTextField.setHorizontalAlignment(2);
        introspectionQueryTextField.setToolTipText("Use a different introspection query for cases where the GraphQL endpoint is incompatible with the plugin introspection query");
        introspectionPanel.add(introspectionQueryTextField, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Introspection Query (Leave blank for default)");
        introspectionPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        enableIntrospectionDefaultValues = new JCheckBox();
        enableIntrospectionDefaultValues.setEnabled(true);
        enableIntrospectionDefaultValues.setText("Include argument default values in schema introspection");
        enableIntrospectionDefaultValues.setToolTipText("Skipping default values improves interoperability with endpoints that don't follow the GraphQL specification for default values. The schema can still be used, but information about the default values will be unavailable.");
        introspectionPanel.add(enableIntrospectionDefaultValues, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        relayModernPanel = new JPanel();
        relayModernPanel.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        rootPanel.add(relayModernPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        enableRelayModernCheckBox = new JCheckBox();
        enableRelayModernCheckBox.setEnabled(true);
        enableRelayModernCheckBox.setText("Enable Relay Modern support");
        enableRelayModernCheckBox.setToolTipText("Adds Relay Modern directives to schema discovery and filters  non-spec errors such as fragment arguments");
        relayModernPanel.add(enableRelayModernCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

}
